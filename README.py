from time import sleep
import telebot
from telebot import types
import configure
import sqlite3
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


mas=[]
status = ['creator', 'administrator', 'member']

hidemark=types.ReplyKeyboardRemove(selective=False)

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bot = telebot.TeleBot(configure.config['token'])
CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"]
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#START
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø kngibot, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —É—á–µ–Ω–∏–∫–æ–º "–•–∞–∫–∞—Å–∫–æ–π –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–∏–º–Ω–∞–∑–∏–∏-–∏–Ω—Ç–µ—Ä–Ω–∞—Ç". –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–µ—Ñ–µ–∫–∞—Ü–∏—é (–í–≤–µ–¥–∏ /ver)')
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
@bot.message_handler(commands=['ver'])
def verification(message):
    markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1=types.KeyboardButton('–£—á–∏—Ç–µ–ª—åüéì')
    item2=types.KeyboardButton('–£—áe–Ω–∏–∫üîç')
    item3=types.KeyboardButton('–í/–ö–ª.–†—É–∫üìñ')
    markup.add(item1, item2, item3)
    mesgt=bot.send_message(message.chat.id, '–ö—Ç–æ –≤—ã, {0.first_name}?'.format(message.from_user), reply_markup = markup)
    bot.register_next_step_handler(mesgt,bot_message)
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@bot.message_handler(content_types=CONTENT_TYPES)
def bot_message(message): 
    if message.chat.type == "private":
        connect=sqlite3.connect('users.db')
        cursor=connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS teacher_id(
                idt NUMERIC,
                name NUMERIC
            ) """)
        connect.commit()
        cursor.execute("""CREATE TABLE IF NOT EXISTS student_id(
                ids INTEGER,
                name NUMERIC
            ) """)
        connect.commit()

        cursor.execute("""CREATE TABLE IF NOT EXISTS ot_zadan(
                id_teach INTEGER,
                txt NUMERIC,
                doc NUMERIC,
                photo NUMERIC,
                voice NUMERIC,
                id_st INTEGER
            )""")
        connect.commit()

        cursor.execute("""CREATE TABLE IF NOT EXISTS info(
                data NUMERIC,
                inf1 NUMERIC,
                inf2 NUMERIC,
                inf3 NUMERIC,
                inf4 NUMERIC
            )""")

        cursor.execute("""CREATE TABLE IF NOT EXISTS zadan(
                data NUMERIC,
                txt NUMERIC,
                doc NUMERIC,
                photo NUMERIC,
                voice NUMERIC
            ) """)
        connect.commit()

        cursor.execute("""CREATE TABLE IF NOT EXISTS Mentor(
                name_v TEXT,
                idv INTEGER
            )""")

        con=sqlite3.connect('classes.db')
        cur=con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS class_id(
            name TEXT,
            idz INTEGER
        )""")

        cursor.execute("""CREATE TABLE IF NOT EXISTS chat_id(
                id INTEGER
            )""")

        people_id=message.chat.id
        cursor.execute(f"SELECT ids FROM student_id WHERE ids={people_id}")
        data1=cursor.fetchone()
    
        cursor.execute(f"SELECT idt FROM teacher_id WHERE idt={people_id}")
        data2=cursor.fetchone()

        cursor.execute(f"SELECT idv FROM Mentor WHERE idv = {people_id}")
        data3=cursor.fetchone()

        if message.text == '–£—áe–Ω–∏–∫üîç':
            mesage_st=bot.send_message(message.chat.id, text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é')
            bot.register_next_step_handler(mesage_st, name_st)

        if message.text == "–í/–ö–ª.–†—É–∫üìñ":
            mesage_v=bot.send_message(message.chat.id, text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é')
            bot.register_next_step_handler(mesage_v, name_v)

        if message.text == '–£—á–∏—Ç–µ–ª—åüéì':
            mesage_th=bot.send_message(message.chat.id, text = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é')
            bot.register_next_step_handler(mesage_th, name_th)

        if message.text == '–ï—â—ë –∑a–¥–∞—Ç—åüìã':
            mesg31=bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user))
            bot.register_next_step_handler(mesg31, Pereslat1)
        if message.text == '–ï—â—ë –∑a–¥–∞—Ç—åüîë':
            mesg31=bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user))
            bot.register_next_step_handler(mesg31, Pereslat2)
        if message.text == '–ï—â—ë –∑–∞–¥–∞—Ç—å‚òë':
            mesg31=bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user))
            bot.register_next_step_handler(mesg31, Pereslat)

        if message.text == '–£—Å—Ç–æ–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä‚è≤':
            send_notification2(message)


def additional(message):
    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        markup1=types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_th1=types.KeyboardButton('–ó–∞–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú')
        item_th2=types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüîé')
        markup1.add(item_th1, item_th2)
        m=bot.send_message(message.chat.id, text='‚¨Ö –ù–∞–∑–∞–¥', reply_markup=markup1)
        bot.register_next_step_handler(m, answert_th1)
    if message.text == '–ï—â—ë –∑a–¥–∞—Ç—åüìã':
        mesg31=bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user))
        bot.register_next_step_handler(mesg31, Pereslat1)
    if message.text == '–ï—â—ë –∑a–¥–∞—Ç—åüîë':
        mesg31=bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user))
        bot.register_next_step_handler(mesg31, Pereslat2)
    if message.text == '–ï—â—ë –∑–∞–¥–∞—Ç—å‚òë':
        mesg31=bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user))
        bot.register_next_step_handler(mesg31, Pereslat)
#teacher
def name_th(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    people_id=message.chat.id
    cursor.execute(f"SELECT ids FROM student_id WHERE ids={people_id}")
    data1=cursor.fetchone()
    markup1=types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_th1=types.KeyboardButton('–ó–∞–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú')
    item_th2=types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüîé')
    markup1.add(item_th1, item_th2)
    name_t=message.text
    cursor.execute(f"DELETE FROM teacher_id WHERE idt = {people_id} OR name = '{name_t}' ")
    connect.commit()
    if data1 is None:
        #add values in fields
        t_id=message.chat.id
        cursor.execute("INSERT INTO teacher_id (idt, name) VALUES(?, ?);", (t_id, name_t,))
        connect.commit()
        msgt=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup = markup1)
        bot.register_next_step_handler(msgt, answert_th1)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –£—áe–Ω–∏–∫üîç.–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–∞–≤–æ, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /adminver')

def answert_th1(message):
    if message.text == '–ó–∞–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú':
        markup2=types.ReplyKeyboardMarkup(one_time_keyboard=True,resize_keyboard=True)
        item__th1=types.KeyboardButton('–ö–ª–∞—Å—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞üìó')
        item__th2=types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞üìï')
        markup2.add(item__th1, item__th2)
        msgt1=bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup=markup2)
        bot.register_next_step_handler(msgt1, answert_th2)

    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüîé':
        con=sqlite3.connect('classes.db')
        cur=con.cursor()
        markproverk=types.ReplyKeyboardMarkup(resize_keyboard=True)
        cur.execute("SELECT name, idz FROM class_id")
        rows_p=cur.fetchall()
        buttons=[]
        for i in rows_p:
            buttons.append(i[0])
        markproverk.add(*buttons)
        msgvibor_16=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, {0.first_name}.'.format(message.from_user), reply_markup=markproverk)
        bot.register_next_step_handler(msgvibor_16, vibor_1_16)            

def answert_th2(message):
    if message.text == '–ö–ª–∞—Å—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞üìó':
        markup1_1=types.ReplyKeyboardMarkup(one_time_keyboard=True,resize_keyboard=True)
        ith1=types.KeyboardButton('–ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüìò')
        ith2=types.KeyboardButton('–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚è≤')
        back=types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
        markup1_1.add(ith1, ith2, back)
        kl=bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup=markup1_1)
        bot.register_next_step_handler(kl, answert_th3)
    
    if message.text == '–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞üìï': 
        vibor2(message)

def answert_th3(message):
    if message.text == '–ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüìò':
        vibor(message)

    if message.text == '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚è≤':
        vibor1(message)

    if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        additional(message)


#function(vibor for teacher)
def vibor(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    markvibor=types.ReplyKeyboardMarkup(resize_keyboard=True)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    buttons=[]
    for i in rows:
        buttons.append(i[0])
    markvibor.add(*buttons)
    msgvibor=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å,{0.first_name}.'.format(message.from_user), reply_markup=markvibor)
    bot.register_next_step_handler(msgvibor, vibor_1)

def vibor_1(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    mark=types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop=types.KeyboardButton('–ï—â—ë –∑a–¥–∞—Ç—åüîë')
    back=types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
    mark.add(stop, back)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    for i in rows:
        if message.text == i[0]:
            chat_id = [int(i[1])]
            cursor.execute("INSERT INTO chat_id  VALUES(?);", chat_id)
            connect.commit()
    msgvibor_1=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user), reply_markup=mark)
    bot.register_next_step_handler(msgvibor_1, Pereslat2)    

def vibor1(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    markvibor1=types.ReplyKeyboardMarkup(resize_keyboard=True)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    buttons=[]
    for i in rows:
        buttons.append(i[0])
    markvibor1.add(*buttons)
    msgvibor1=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å,{0.first_name}.'.format(message.from_user), reply_markup=markvibor1)
    bot.register_next_step_handler(msgvibor1, vibor1_1)

def vibor1_1(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    mark=types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop=types.KeyboardButton('–ï—â—ë –∑a–¥–∞—Ç—åüìã')
    timer=types.KeyboardButton('–£—Å—Ç–æ–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä‚è≤')
    back=types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
    mark.add(stop, timer, back)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    for i in rows:
        if message.text == i[0]:
            chat_id = [int(i[1])]
            cursor.execute("INSERT INTO chat_id  VALUES(?);", chat_id)
            connect.commit()
    msgvibor1_1=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user), reply_markup=mark)
    bot.register_next_step_handler(msgvibor1_1, Pereslat1)


def vibor2(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    markvibor2=types.ReplyKeyboardMarkup(resize_keyboard=True)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    buttons=[]
    for i in rows:
        buttons.append(i[0])
    markvibor2.add(*buttons)  
    msgvibor2=bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, {0.first_name}.'.format(message.from_user), reply_markup=markvibor2)
    bot.register_next_step_handler(msgvibor2, vibor2_1) 

def vibor2_1(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    mark=types.ReplyKeyboardMarkup(resize_keyboard=True)
    stop=types.KeyboardButton('–ï—â—ë –∑–∞–¥–∞—Ç—å‚òë')
    back=types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
    mark.add(stop, back) 
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    for i in rows:
        if message.text == i[0]:
            chat_id = [int(i[1])]
            cursor.execute("INSERT INTO chat_id  VALUES(?);", chat_id)
            connect.commit()
    msgvibor2_1=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user), reply_markup=mark)
    bot.register_next_step_handler(msgvibor2_1, Pereslat)

def vibor_1_16(message):
    markup1=types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_th1=types.KeyboardButton('–ó–∞–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å—Éüìú')
    item_th2=types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüîé')
    markup1.add(item_th1, item_th2)
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cursor.execute("SELECT txt, doc, photo, voice, id_st FROM ot_zadan")
    zadaniya=cursor.fetchall()
    cursor.execute("SELECT ids, name FROM student_id")
    name_st=cursor.fetchall()
    mas3=[]  
    mas=[]   
    bot.send_message(message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:') 
    for zad in zadaniya:
        for n in name_st:
            name=n
            if zad[-1]==name[0]:
                if name[1] not in mas:
                    bot.send_message(message.chat.id, text=name[1])
                    mas.append(name[1])
                else:
                    
                    if zad[0]!=0:
                        mas3.append(zad[0])
                        bot.send_message(message.chat.id, text =mas3[-1])
                    if zad[0]==0 and zad[1]!=0:
                        mas3.append(zad[1])
                        bot.send_document(message.chat.id, document=mas3[-1])
                    if zad[0]==0 and zad[1]==0 and zad[2]!=0:
                        mas3.append(zad[2])
                        bot.send_photo(message.chat.id, photo=mas3[-1])
                    if zad[0]==0 and zad[1]==0 and zad[2]==0 and zad[3]!=0:
                        mas3.append(zad[3])    
                        bot.send_voice(message.chat.id, voice=mas3[-1])
    mas3.clear()
    mas.clear()
    msgt=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup = markup1)
    bot.register_next_step_handler(msgt, answert_th1)


#student
def name_st(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    people_id=message.chat.id
    cursor.execute(f"SELECT idt FROM teacher_id WHERE idt={people_id}")
    data2=cursor.fetchone()
    cursor.execute(f"SELECT idv FROM Mentor WHERE idv = {people_id}")
    data3=cursor.fetchone()
    murkup_st = types.ReplyKeyboardMarkup(resize_keyboard=True)
    st_class=types.KeyboardButton('–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞üìï')
    st2_class=types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚è≤')
    st1_class1=types.KeyboardButton('–ó–∞–¥–∞–Ω–∏—è —Å–µ–π—á–∞—Åüìü')
    murkup_st.add(st_class, st1_class1, st2_class)
    name_s=message.text
    cursor.execute(f"DELETE FROM student_id WHERE ids = {people_id} OR name = '{name_s}' ")
    connect.commit()
    if (data2 or data3) is None:
        #add values in fields
        st_id=message.chat.id
        cursor.execute("INSERT INTO student_id (name, ids) VALUES(?, ?);", (name_s, st_id,))
        connect.commit()
        msgs=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup = murkup_st)
        bot.register_next_step_handler(msgs, answert_st1)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –£—á–∏—Ç–µ–ª—åüéì –∏–ª–∏ –í/–ö–ª.–†—É–∫üìñ.–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–∞–≤–æ, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /adminver') 
def menu_st(message):
    murkup_st = types.ReplyKeyboardMarkup(resize_keyboard=True)
    st_class=types.KeyboardButton('–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞üìï')
    st2_class=types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚è≤')
    st1_class1=types.KeyboardButton('–ó–∞–¥–∞–Ω–∏—è —Å–µ–π—á–∞—Åüìü')
    murkup_st.add(st_class, st1_class1, st2_class)
    msgs=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup = murkup_st)
    bot.register_next_step_handler(msgs, answert_st1)

def answert_st1(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor() 
    if message.text == '–ó–∞–¥–∞–Ω–∏—è —Å–µ–π—á–∞—Åüìü':
        vibor_st(message)

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚è≤':
        markzad_st=types.ReplyKeyboardMarkup(resize_keyboard=True)
        cursor.execute("SELECT name FROM teacher_id")
        teachers=cursor.fetchall()
        buttons=[]
        for th in teachers:
            buttons.append(th[0])
        markzad_st.add(*buttons)            
        msgzad_st=bot.send_message(message.chat.id, text='–í—ã–±–∏—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –£—á–∏—Ç–µ–ª—èüéì, {0.first_name}.'.format(message.from_user), reply_markup=markzad_st)
        bot.register_next_step_handler(msgzad_st, otpravka) 
    if message.text == '–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞üìï': 
        cursor.execute("SELECT data FROM zadan")
        zadan=cursor.fetchall()
        bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ...', reply_markup=hidemark)
        for z in zadan:
            sleep(1.5)
            bot.send_message(message.chat.id, text=z)
        dz=bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—èüìò (–í—ã–ø–∏—à–∏—Ç–µ –µ—ë)', reply_markup=hidemark)
        bot.register_next_step_handler(dz, homework)

def homework(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cursor.execute("SELECT data, txt, photo, voice, doc FROM zadan")
    homeworks=cursor.fetchall()
    mas2=[]
    murkup_st1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    st_class1=types.KeyboardButton('–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞üìï')
    st2_class1=types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚è≤')
    st1_class2=types.KeyboardButton('–ó–∞–¥–∞–Ω–∏—è —Å–µ–π—á–∞—Åüìü')
    murkup_st1.add(st_class1, st1_class2, st2_class1)
    for i in homeworks:
        if str(message.text) == i[0]:
            if i[1]!=0:
                mas2.append(i[1])
                bot.send_message(message.chat.id, text = mas2[-1])
            if i[1]==0 and i[2]!=0:
                mas2.append(i[2])
                bot.send_photo(message.chat.id, photo=mas2[-1])
            if i[1]==0 and i[2]==0 and i[3]!=0:
                mas2.append(i[3])
                bot.send_voice(message.chat.id, voice=mas2[-1])
            if i[1]==0 and i[2]==0 and i[3]==0 and i[4]!=0:
                mas2.append(i[4])    
                bot.send_document(message.chat.id, document=mas2[-1])
        mas2.clear()
    menu_st(message)
#function 
def otpravka(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cursor.execute("SELECT name, idt FROM teacher_id")
    ot=cursor.fetchall()
    for j in ot:
        if message.text == j[0]:
            teach=[int(j[1])]
            cursor.execute("INSERT INTO ot_zadan (id_teach) VALUES(?);", teach)
            connect.commit()                      
            otp=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µüîé, {0.first_name}.'.format(message.from_user))
            bot.register_next_step_handler(otp, pereslat_th) 
#function vibor for student
def vibor_st(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    markvibor_st=types.ReplyKeyboardMarkup(resize_keyboard=True)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    buttons=[]
    for i in rows:
        buttons.append(i[0])
    markvibor_st.add(*buttons)
    msgvibor_st=bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, {0.first_name}.'.format(message.from_user), reply_markup=markvibor_st)
    bot.register_next_step_handler(msgvibor_st, vibor_st_2) 

def vibor_st_2(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    for i in rows:
        if message.text == i[0]:
            chat_id = [int(i[1])]
            cursor.execute("INSERT INTO chat_id  VALUES(?);", chat_id)
            connect.commit()
    vibor_st_3(message)
def vibor_st_3(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    user_status = str(bot.get_chat_member(chat_id=classroom, user_id=message.from_user.id).status)    
    if user_status in status:
        mas1=[]
        cursor.execute("SELECT txt, photo, voice, doc  FROM zadan")
        rows=cursor.fetchall()
        for i in rows:
            k=i
        if k[0]!=0:
            mas1.append(k[0])
            bot.send_message(message.chat.id, text = mas1[-1])
        if k[0]==0 and k[1]!=0:
            mas1.append(k[1])
            bot.send_photo(message.chat.id, photo=mas1[-1])
        if k[0]==0 and k[1]==0 and k[2]!=0:
            mas1.append(k[2])
            bot.send_voice(message.chat.id, voice=mas1[-1])
        if k[0]==0 and k[1]==0 and k[2]==0 and k[3]!=0:
            mas1.append(k[3])    
            bot.send_document(message.chat.id, document=mas1[-1])             
        mas1.clear()
    else: 
        bot.send_message(message.chat.id, '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ —Å –±–æ—Ç–æ–º')
    menu_st(message)
#mentor
def name_v(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    murkup_class = types.ReplyKeyboardMarkup(resize_keyboard=True)
    i_class=types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Åüé©')
    i_class1=types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìí')
    murkup_class.add(i_class, i_class1)
    people_id=message.chat.id
    cursor.execute(f"SELECT ids FROM student_id WHERE ids={people_id}")
    data1=cursor.fetchone()
    name_v=message.text
    cursor.execute(f"DELETE FROM Mentor WHERE idv = {people_id} OR name_v = '{name_v}' ")
    connect.commit()
    if data1 is None:
        #add values in fields
        v_id=message.chat.id
        cursor.execute("INSERT INTO Mentor (name_v, idv) VALUES(?, ?);", (name_v, v_id,))
        connect.commit()
        msgv=bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user), reply_markup = murkup_class)
        bot.register_next_step_handler(msgv, answert_v1)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –£—áe–Ω–∏–∫üîç.–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–∞–≤–æ, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /adminver')

def answert_v1(message):
    if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìí':
        vibor_v(message)
    if message.text == '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Åüé©':
        msgnamecreated=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∫–ª–∞—Å—Å–∞ , {0.first_name}.'.format(message.from_user))
        bot.register_next_step_handler(msgnamecreated, crname_class)

def crname_class(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    name_class=message.text
    mas.append(name_class)
    idmsg=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ id –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Å–∞ (–í–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º @username_to_id_bot), {0.first_name}.'.format(message.from_user))
    bot.register_next_step_handler(idmsg, crid_class)

def crid_class(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    id_class=int(message.text)
    cur.execute(f"SELECT idz FROM class_id WHERE idz = {id_class}")
    data5=cur.fetchone()
    if data5 is None:
        cur.execute("INSERT INTO class_id (name, idz) VALUES (?, ?);", (mas[0], id_class,))
        con.commit()
        bot.send_message(message.chat.id, '–ö–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, {0.first_name}.'.format(message.from_user))
    else:
        bot.send_message(message.chat.id, '–ö–ª–∞—Å—Å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç, {0.first_name}. (–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /admin)'.format(message.from_user))
    mas.clear()

def vibor_v(message):
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    markvibor_v=types.ReplyKeyboardMarkup(resize_keyboard=True)
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    buttons=[]
    for i in rows:
        buttons.append(i[0])
    markvibor_v.add(*buttons)
    msgvibor_v=bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, {0.first_name}.'.format(message.from_user), reply_markup=markvibor_v)
    bot.register_next_step_handler(msgvibor_v, vibor_v_1) 

def vibor_v_1(message):
    murkup_class = types.ReplyKeyboardMarkup(resize_keyboard=True)
    i_class=types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Åüé©')
    i_class1=types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìí')
    murkup_class.add(i_class, i_class1)
    con=sqlite3.connect('classes.db')
    cur=con.cursor()
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cur.execute("SELECT name, idz FROM class_id")
    rows=cur.fetchall()
    for i in rows:
        if message.text == i[0]:
            chat_id = [int(i[1])]
            cursor.execute("INSERT INTO chat_id  VALUES(?);", chat_id)
            connect.commit()
    msgvibor_v_1=bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∞—Å—Å—Éüìú, {0.first_name}.'.format(message.from_user), reply_markup=murkup_class)
    bot.register_next_step_handler(msgvibor_v_1, Pereslat_info)



def send_notification(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    bot.send_message(message.chat.id, "45 –º–∏–Ω—É—Ç –∏–¥—É—Ç")
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    time_s = 10
    for t in range(time_s, 0, -1):
        sleep(1)
    bot.send_message(message.chat.id, "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
    bot.send_message(chat_id=classroom, text="–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
    ad=bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user)) 
    bot.register_next_step_handler(ad, additional)
def send_notification2(message):
    tim = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–∞–π–º–µ—Ä –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    bot.register_next_step_handler(tim, timer)



def timer(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    time_s = int(message.text)
    eq=bot.send_message(chat_id=classroom, text=f"–í–∞—à —Ç–∞–π–º–µ—Ä {time_s} —Å–µ–∫—É–Ω–¥")
    bot.send_message(message.chat.id, "–í—Ä–µ–º—è –∏–¥—ë—Ç")
    for i in range(time_s, 0, -1):
        sleep(1)
    bot.send_message(message.chat.id, "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
    bot.send_message(chat_id=classroom, text="–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
    ad=bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user)) 
    bot.register_next_step_handler(ad, additional)

def Pereslat_info(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    import datetime
    dt_now = str(datetime.datetime.now())
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    if message.text is None:
        text1=0
    else:
        text1=str(message.text)
        bot.send_message(chat_id=classroom, text=text1, reply_markup=hidemark)
    if message.document is None:
        doc=0
    else:
        doc=message.document.file_id
        bot.send_document(chat_id=classroom, document=doc,reply_markup=hidemark)
    if message.voice is None:
        voice1=0
    else:
        voice1=message.voice.file_id
        bot.send_voice(chat_id=classroom, voice=voice1,reply_markup=hidemark)
    if message.photo is None: 
        photo=0
    else:
        photo=message.photo[-1].file_id
        bot.send_photo(chat_id=classroom, photo=photo,reply_markup=hidemark)
    cursor.execute("INSERT INTO info (data, inf1, inf2, inf3, inf4) VALUES(?, ?, ?, ?, ?);", (dt_now, text1, doc, photo, voice1,))
    connect.commit()


def Pereslat2(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    import datetime
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    dt_now = str(datetime.datetime.now())
    if message.text is None:
        text1=0
    else:
        text1=message.text
        bot.send_message(chat_id=classroom, text=text1, reply_markup=hidemark)
    if message.document is None:
        doc=0
    else:
        doc=message.document.file_id
        bot.send_document(chat_id=classroom, document=doc,reply_markup=hidemark)
    if message.voice is None:
        voice1=0
    else:
        voice1=message.voice.file_id
        bot.send_voice(chat_id=classroom, voice=voice1,reply_markup=hidemark)
    if message.photo is None: 
        photo=0
    else:
        photo=message.photo[-1].file_id
        bot.send_photo(chat_id=classroom, photo=photo,reply_markup=hidemark)
    cursor.execute("INSERT INTO zadan (data, txt, doc, photo, voice) VALUES(?, ?, ?, ?, ?);", (dt_now, text1, doc, photo, voice1,))
    connect.commit()
    ad=bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, {0.first_name}.'.format(message.from_user)) 
    bot.register_next_step_handler(ad, additional)

def Pereslat1(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    import datetime
    dt_now = str(datetime.datetime.now())
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    if message.text is None:
        text1=0
    else:
        text1=str(message.text)
        bot.send_message(chat_id=classroom, text=text1, reply_markup=hidemark)
    if message.document is None:
        doc=0
    else:
        doc=message.document.file_id
        bot.send_document(chat_id=classroom, document=doc,reply_markup=hidemark)
    if message.voice is None:
        voice1=0
    else:
        voice1=message.voice.file_id
        bot.send_voice(chat_id=classroom, voice=voice1,reply_markup=hidemark)
    if message.photo is None: 
        photo=0
    else:
        photo=message.photo[-1].file_id
        bot.send_photo(chat_id=classroom, photo=photo,reply_markup=hidemark)
    cursor.execute("INSERT INTO zadan (data, txt, doc, photo, voice) VALUES(?, ?, ?, ?, ?);", (dt_now, text1, doc, photo, voice1,))
    connect.commit()


def Pereslat(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    import datetime
    cursor.execute("SELECT id FROM chat_id")
    chats=cursor.fetchall()
    chat_id=chats[-1]
    classroom=chat_id[0]
    dt_now = str(datetime.datetime.now())
    if message.text is None:
        text1=0
    else:
        text1=str(message.text)
        bot.send_message(chat_id=classroom, text=text1, reply_markup=hidemark)
    if message.document is None:
        doc=0
    else:
        doc=message.document.file_id
        bot.send_document(chat_id=classroom, document=doc,reply_markup=hidemark)
    if message.voice is None:
        voice1=0
    else:
        voice1=message.voice.file_id
        bot.send_voice(chat_id=classroom, voice=voice1,reply_markup=hidemark)
    if message.photo is None: 
        photo=0
    else:
        photo=message.photo[-1].file_id
        bot.send_photo(chat_id=classroom, photo=photo,reply_markup=hidemark)
    cursor.execute("INSERT INTO zadan (data, txt, doc, photo, voice) VALUES(?, ?, ?, ?, ?);", (dt_now, text1, doc, photo, voice1,))
    connect.commit()
    send_notification(message)
def pereslat_th(message):
    connect=sqlite3.connect('users.db')
    cursor=connect.cursor()
    cursor.execute("SELECT id_teach FROM ot_zadan")
    chats_th=cursor.fetchall()
    chat_id=chats_th[-1]
    chat=chat_id[0]
    if message.text is None:
        text1=0
    else:
        text1=str(message.text)
    if message.document is None:
        doc=0
    else:
        doc=message.document.file_id
    if message.voice is None:
        voice1=0
    else:
        voice1=message.voice.file_id
    if message.photo is None: 
        photo=0
    else:
        photo=message.photo[-1].file_id
    cursor.execute("INSERT INTO ot_zadan (txt, doc, photo, voice, id_st) VALUES(?, ?, ?, ?, ?);", (text1, doc, photo, voice1, message.chat.id,))
    connect.commit()
    bot.send_message(message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–≤–ª–µ–Ω–æ')
    menu_st(message)
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------            
bot.polling(none_stop=True, interval=0)
